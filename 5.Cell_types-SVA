# Use the code to estimate cell count from minfi package, and calculate the surrogate variables from sva package.
# The code will use the setting for DLPFC data, to estimate "NeuN_neg" and "NeuN_pos" proportion.

module load R/4.2.2
R --vanilla --no-save

# Load Library
library(minfi)
library(FlowSorted.DLPFC.450k)
library(limma)
library(lumi)
library(sva)
library(bacon)
library(wateRmelon)
library(RColorBrewer)
library(ggplot2)
library(patchwork)
library(IlluminaHumanMethylationEPICmanifest)
library(IlluminaHumanMethylationEPICanno.ilm10b4.hg19)
library(DMRcate)
library(DMRcatedata)
library(patchwork)
require(data.table)
require(tidyverse)
library(dplyr)
library(stringr)
library(ggrepel)

## Cell type ##
# Load data (pre normalization)
load(file.path(outputdir, "QC_preNorm.Rda"))
targets <- "/data/ALS_50k/DNA_methylation/methylation/outputAnalysis_FINAL/targets_ctrl_lbd_PCA.txt"
targets <- read.table(targets, sep="\t", header=T) 
rgSet <- rgSet[,colnames(rgSet) %in% targets$sampleID]

# Set output directory
working_dir <- "/data/ALS_50k/DNA_methylation/methylation/revision_03-2023/re-analysis/"
setwd(working_dir)

# Convert assay to 450K (no function is avaiable for EPIC and DLPFC)
rgSet_450k <- convertArray(rgSet, outType = "IlluminaHumanMethylation450k") 

# Estimate cell composition (Neun_neg and Neun_pos)
cellComp <- estimateCellCounts(rgSet_450k, compositeCellType = "DLPFC",
                   processMethod = "auto", probeSelect = "both",
                   cellTypes = c("NeuN_neg", "NeuN_pos"),
                   referencePlatform = c("IlluminaHumanMethylation450k"),
                   returnAll = FALSE, meanPlot = FALSE, verbose = TRUE)
                   
cellCount <- data.frame(sampleID = row.names(cellComp), cellComp)   
rownames(cellCount) = NULL
head(cellCount)
write.table(cellCount, "cellCount_minfi.txt", sep="\t") 

### SVA ###
# Load data
load(file.path("/data/ALS_50k/DNA_methylation/methylation/revision_03-2023/mSetSq_forSVA.Rda")) # Load mSetSq for SVA
load(file.path("/data/ALS_50k/DNA_methylation/methylation/outputQC_04-25-22/getBeta_EPIC.Rda")) # Load betas
targets <- "/data/ALS_50k/DNA_methylation/methylation/outputAnalysis_FINAL/targets_ctrl_lbd_PCA.txt"
targets <- read.table(targets, sep="\t", header=T) 
bVals <- bVals[,colnames(bVals) %in% targets$sampleID]
mSetSq <- mSetSq[,colnames(mSetSq) %in% targets$sampleID] # Subset mSetSq for SVA
cellCount <- "/data/ALS_50k/DNA_methylation/methylation/revision_03-2023/cellCount_minfi.txt"
cellCount <- read.table(cellCount, sep="\t", header=T) 

# Add cellCount to targets file
targets <- merge(targets, cellCount, by="sampleID")
head(targets)

# Get EPIC annotation data hg19
annEPIC <- getAnnotation(IlluminaHumanMethylationEPICanno.ilm10b4.hg19)
annEPIC <- data.frame(annEPIC)
annEPIC <- annEPIC[rownames(bVals),] # Subset and sort EPIC annotation data

# Get EPIC annotation data hg38
#annEPIC_38 <- fread("/data/ALS_50k/DNA_methylation/methylation/EPIC.anno.GRCh38.tsv")
#annEPIC_38_bVals <- annEPIC_38[annEPIC_38$probeID %in% rownames(bVals),] 

# Setting covariates
sampleType <- as.factor(targets$sampleType)
age <- targets$Age
sex <- as.factor(targets$Sex)
batch <- factor(targets$Experiment_N)

## Get surrogate variables
# Create a design matrix
design <- model.matrix(~ 0 + sampleType + age + sex + batch + PC1 + PC2 + PC3 + PC4 + PC5 + NeuN_neg + NeuN_pos, data=targets)
design.null <- model.matrix(~ 0 + age + sex + batch + PC1 + PC2 + PC3 + PC4 + PC5 + NeuN_neg + NeuN_pos, data=targets)
head(design)
head(design.null)

# Calculate M values and remove NAs/infinite values
Mvals <- getM(mSetSq)
Mvals <- Mvals[!is.infinite(rowSums(Mvals)),]

# Calculate the number of surrogate variables to estimate in a model
#n.sv <- num.sv(Mvals, design, method = "leek")
#print(paste("Number of significant surrogate variables is: ", n.sv, sep = ""))

# Estimate surrogate variables using SVA
sva_res <- sva(Mvals, design, design.null, method = "irw") #, n.sv = n.sv)
s_vars <- sva_res$sv # Extract the surrogate variables
colnames(s_vars) <- paste0("SV", 1:ncol(s_vars))
head(s_vars)

# Add SVs to targets file
targets <- cbind(targets, s_vars)
head(targets)

# Save targets + SVs
write.table(targets, file=paste(outputdir,"targets.PC.SV.txt",sep=""), quote=FALSE)
#targets <- read.table("setting_2B/targets.PC.SV.txt", sep="\t", header=T)

